"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// imports
var axios_1 = require("axios");
var Address_1 = require("./Address");
var BITBOX_1 = require("./BITBOX");
var BitcoinCash_1 = require("./BitcoinCash");
var ECPair_1 = require("./ECPair");
var RawTransactions_1 = require("./RawTransactions");
var TransactionBuilder_1 = require("./TransactionBuilder");
var Util = /** @class */ (function () {
    function Util(restURL) {
        if (restURL === void 0) { restURL = BITBOX_1.REST_URL; }
        this.restURL = restURL;
        this.address = new Address_1.Address(restURL);
        this.ecPair = new ECPair_1.ECPair(this.address);
        this.bitcoinCash = new BitcoinCash_1.BitcoinCash(this.address);
        this.rawTransactions = new RawTransactions_1.RawTransactions(restURL);
    }
    Util.prototype.validateAddress = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var response, response, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        if (!(typeof address === "string")) return [3 /*break*/, 2];
                        return [4 /*yield*/, axios_1.default.get(this.restURL + "util/validateAddress/" + address)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data
                            // Array of blocks.
                        ];
                    case 2:
                        if (!Array.isArray(address)) return [3 /*break*/, 4];
                        return [4 /*yield*/, axios_1.default.post(this.restURL + "util/validateAddress", {
                                addresses: address
                            })];
                    case 3:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 4: throw new Error("Input must be a string or array of strings.");
                    case 5:
                        error_1 = _a.sent();
                        if (error_1.response && error_1.response.data)
                            throw error_1.response.data;
                        else
                            throw error_1;
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    // Sweep a private key in compressed WIF format and sends funds to another
    // address.
    // Passing in optional balanceOnly flag will return just the balance without
    // actually moving the funds.
    // Or 0 if no funds are found, otherwise:
    // Returns an object containing the amount of BCH swept from address,
    // and the txid of the generated transaction that swept the funds.
    Util.prototype.sweep = function (wif, toAddr, balanceOnly) {
        if (balanceOnly === void 0) { balanceOnly = false; }
        return __awaiter(this, void 0, void 0, function () {
            var keyPair, fromAddr, details, balance, u, utxos, transactionBuilder, originalAmount, i, utxo, byteCount, fee, sendAmount, redeemScript, i, utxo, tx, hex, txid, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        // Input validation
                        if (!wif || wif === "") {
                            throw new Error("wif private key must be included in Compressed WIF format.");
                        }
                        // Input validation
                        if (!balanceOnly) {
                            if (!toAddr || toAddr === "") {
                                throw new Error("Address to receive swept funds must be included unless balanceOnly flag is true.");
                            }
                        }
                        keyPair = this.ecPair.fromWIF(wif);
                        fromAddr = this.ecPair.toCashAddress(keyPair);
                        console.log("from", fromAddr);
                        return [4 /*yield*/, this.address.details(fromAddr)];
                    case 1:
                        details = (_a.sent());
                        balance = details.balance;
                        console.log(balance);
                        // If balance is zero or balanceOnly flag is passed in, exit.
                        if (balance === 0 || balanceOnly)
                            return [2 /*return*/, balance
                                // Get UTXOs associated with public address.
                            ];
                        return [4 /*yield*/, this.address.utxo(fromAddr)];
                    case 2:
                        u = (_a.sent());
                        utxos = u.utxos;
                        transactionBuilder = new TransactionBuilder_1.TransactionBuilder(this.address.detectAddressNetwork(fromAddr));
                        originalAmount = 0;
                        // Add all UTXOs to the transaction inputs.
                        for (i = 0; i < utxos.length; i++) {
                            utxo = utxos[i];
                            originalAmount = originalAmount + utxo.satoshis;
                            transactionBuilder.addInput(utxo.txid, utxo.vout);
                        }
                        if (originalAmount < 1)
                            throw new Error("Original amount is zero. No BCH to send.");
                        byteCount = this.bitcoinCash.getByteCount({ P2PKH: utxos.length }, { P2PKH: 1 });
                        fee = Math.ceil(1.1 * byteCount);
                        sendAmount = originalAmount - fee;
                        // add output w/ address and amount to send
                        transactionBuilder.addOutput(this.address.toLegacyAddress(toAddr), sendAmount);
                        redeemScript = void 0;
                        for (i = 0; i < utxos.length; i++) {
                            utxo = utxos[i];
                            transactionBuilder.sign(i, keyPair, redeemScript, transactionBuilder.hashTypes.SIGHASH_ALL, utxo.satoshis);
                        }
                        tx = transactionBuilder.build();
                        hex = tx.toHex();
                        return [4 /*yield*/, this.rawTransactions.sendRawTransaction(hex)];
                    case 3:
                        txid = _a.sent();
                        return [2 /*return*/, txid];
                    case 4:
                        error_2 = _a.sent();
                        if (error_2.response && error_2.response.data)
                            throw error_2.response.data;
                        else
                            throw error_2;
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    return Util;
}());
exports.Util = Util;
//# sourceMappingURL=Util.js.map